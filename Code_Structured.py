# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/107uuvnOFiwATw4m9qUFMQWx9bsxKgAi0
"""

# =======================================================
#  Nobel Prize Data Analysis
# Author: [Hussam Ashraf Shaaban Bakry]
# Description: Nobel Prize Analysis using Python
# =======================================================

# --- Libraries ---
from google.colab import files
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# =======================================================
# File Upload
# =======================================================
print(" Please choose the file 'nobels.csv' to upload")
uploaded = files.upload()

# File Reading
nobels = pd.read_csv("nobels.csv", names=['year','field','winner_name','dob','city'])

# =======================================================
#  Data Cleaning
# =======================================================
# 1- Standardize column names (convert to lowercase and remove spaces)
nobels.columns = nobels.columns.str.strip().str.lower().str.replace(" ", "_")

# 2- Remove extra spaces in text values
nobels['winner_name'] = nobels['winner_name'].str.strip()
nobels['field'] = nobels['field'].str.strip()

# 3- Convert date of birth column to datetime
nobels['dob'] = pd.to_datetime(nobels['dob'], errors='coerce')

# 4- Remove duplicates
nobels = nobels.drop_duplicates()

# 5- Remove rows with missing (NaN) values
nobels = nobels.dropna()

# 6- Reset index after cleaning
nobels = nobels.reset_index(drop=True)

# 7- Create a new column for winner’s age at the time of the award
nobels['winner_age_at_reward'] = nobels['year'] - nobels['dob'].dt.year

# =======================================================
#  Basic Information
# =======================================================
print("\n Data information after cleaning:")
print(nobels.info())
print("\n General statistics for winners’ ages:")
print(nobels['winner_age_at_reward'].describe())

# =======================================================
#  Visualization Settings
# =======================================================
sns.set(style="whitegrid", palette="Set2")

# =======================================================
#  First Page of Visualizations (6 main charts)
# =======================================================
fig, axes = plt.subplots(2, 3, figsize=(18, 10))

# 1- Age distribution at the time of winning
sns.histplot(nobels['winner_age_at_reward'], bins=20, kde=True, ax=axes[0,0], color='skyblue')
axes[0,0].set_title("Age Distribution of Winners")

# 2- Number of prizes by field
sns.countplot(y='field', data=nobels, order=nobels['field'].value_counts().index, ax=axes[0,1])
axes[0,1].set_title("Number of Prizes by Field")

# 3- Mean age per field
sns.barplot(x='field', y='winner_age_at_reward', data=nobels, estimator='mean', ax=axes[0,2])
axes[0,2].set_title("Mean Age by Field")
axes[0,2].tick_params(axis='x', rotation=45)

# 4- Relationship between year and age
sns.scatterplot(x='year', y='winner_age_at_reward', data=nobels, hue='field', ax=axes[1,0])
axes[1,0].set_title("Age vs Year")

# 5- Top 10 cities by number of winners
top_cities = nobels['city'].value_counts().head(10)
sns.barplot(x=top_cities.values, y=top_cities.index, ax=axes[1,1])
axes[1,1].set_title("Top 10 Cities by Number of Winners")

# 6- Distribution of prize years
sns.histplot(nobels['year'], bins=30, color='orange', ax=axes[1,2])
axes[1,2].set_title("Prize Year Distribution")

plt.tight_layout(pad=3)
plt.show()

# =======================================================
#  Second Page of Visualizations (4 additional charts)
# =======================================================
fig, axes = plt.subplots(2, 2, figsize=(16, 10))

# 7- Age range (Boxplot)
sns.boxplot(y='winner_age_at_reward', data=nobels, ax=axes[0,0], color='lightblue')
axes[0,0].set_title("Age Range of Winners")

# 8- Field proportions (Pie Chart)
field_counts = nobels['field'].value_counts()
axes[0,1].pie(field_counts, labels=field_counts.index, autopct='%1.1f%%', startangle=140)
axes[0,1].set_title("Field Distribution")

# 9- Top 5 cities and their corresponding fields
top5_cities = nobels[nobels['city'].isin(nobels['city'].value_counts().head(5).index)]
sns.countplot(data=top5_cities, x='city', hue='field', ax=axes[1,0])
axes[1,0].set_title("Fields by Top 5 Cities")
axes[1,0].tick_params(axis='x', rotation=45)

plt.tight_layout(pad=3)
plt.show()

# =======================================================
#  Additional Insights
# =======================================================
print("\n Youngest Winner:")
print(nobels.loc[nobels['winner_age_at_reward'].idxmin()])

print("\n Oldest Winner:")
print(nobels.loc[nobels['winner_age_at_reward'].idxmax()])

print("\n Year Range:", nobels['year'].min(), "→", nobels['year'].max())
print(" Number of unique cities:", nobels['city'].nunique())
print(" Total records after cleaning:", len(nobels))



